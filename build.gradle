plugins {
	id 'com.gradle.plugin-publish' version '0.9.7'
	id 'com.jfrog.bintray' version '1.7.3'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
//apply plugin: 'maven'

dependencies {
    compile gradleApi()
    compile localGroovy()
	implementation 'com.amazonaws:aws-java-sdk-ecr:1.11.283'
	implementation 'com.amazonaws:aws-java-sdk-acm:1.11.283'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.11.283'
	implementation 'com.github.docker-java:docker-java:3.0.14'
	implementation 'io.fabric8:kubernetes-client:3.1.10'
	implementation 'org.eclipse.jgit:org.eclipse.jgit:4.11.0.201803080745-r'
}

repositories {
	jcenter()
}

version = '0.0.6'
group = 'io.liquidshack'
def myVcsUrl = 'https://github.com/LiquidShack/rubber-elephant-mahout.git'
def	myWebUrl = 'https://github.com/LiquidShack/rubber-elephant-mahout'
//def	sourceUrl = 'https://github.com/LiquidShack/rubber-elephant-mahout.git'
def	myScmUrl = 'scm:git://github.com/LiquidShack/rubber-elephant-mahout.git'
def	myId = 'LiquidShack'
def	myName = 'Gregory Diamond'
def	myEmail = 'squidgmd@yahoo.com'
def	displayName = 'Rubber Elephant Mahout'
def thisDescription = 'Glue to perform devops deployments'

jar {
	version = "$project.version"
}

pluginBundle {
	website = myWebUrl
	vcsUrl = myVcsUrl
	plugins {
		rubberElephantMahoutPlugin {
			id = 'io.liquidshack.rubber-elephant-mahout'
			displayName = displayName
			description = thisDescription
			tags = ['LiquidShack']
			version = "$project.version"
		}
	}
}

publishing {
	publications {
		main(MavenPublication) {
			from components.java
//			artifact sourcesJar
//			artifact javadocJar
			pom.withXml {
				asNode().with {
					appendNode('packaging', 'jar')
					appendNode('name', displayName)
					appendNode('description', thisDescription)
					appendNode('url', webUrl)
					appendNode('developers').with {
						appendNode('developer').with {
							appendNode('id', myId)
							appendNode('name', myName)
							appendNode('email',myEmail)
						}
					}
					appendNode('scm').with {
						appendNode('connection', myScmUrl)
						//appendNode('developerConnection', scmUrl)
						appendNode('url', myVcsUrl)
					}
					def dependenciesNode = asNode().getAt("dependencies")[0]
					configurations.implementation.allDependencies.each {
					   if (it.name != 'unspecified') {
						  def dependencyNode = dependenciesNode.appendNode('dependency')
						  dependencyNode.appendNode('groupId', it.group)
						  dependencyNode.appendNode('artifactId', it.name)
						  dependencyNode.appendNode('version', it.version)
					   }
					}
				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
	
	publications = ['main']

	dryRun = false
	publish = true
	pkg {
		repo = 'gradle-plugins'
		name = "$project.name"
		desc = thisDescription
		websiteUrl = myWebUrl
		issueTrackerUrl = "${myWebUrl}/issues"
		vcsUrl = myVcsUrl
		licenses = ['Apache-2.0']
		labels = ['LiquidShack']
		version {
			vcsTag = "v$project.version"
			attributes = ['gradle-plugin': "${project.group}:${project.group}:${project.name}"]
		}
	}
}
